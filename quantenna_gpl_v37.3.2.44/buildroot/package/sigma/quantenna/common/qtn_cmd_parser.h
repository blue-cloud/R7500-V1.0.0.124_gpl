/****************************************************************************
*
* Copyright (c) 2015  Quantenna Communications, Inc.
*
* Permission to use, copy, modify, and/or distribute this software for any
* purpose with or without fee is hereby granted, provided that the above
* copyright notice and this permission notice appear in all copies.
*
* THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
* WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
* SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
* RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
* NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
* USE OR PERFORMANCE OF THIS SOFTWARE.
*
*****************************************************************************/

#ifndef QTN_CMD_PARSER_H_
#define QTN_CMD_PARSER_H_

enum qtn_token {
	QTN_TOK_NAME = 1,
	QTN_TOK_PROGRAM,
	QTN_TOK_PROG,		/* 'Prog', The same meaning as PROGRAM. Used for STA */
	QTN_TOK_INTERFACE,
	QTN_TOK_TYPE,
	QTN_TOK_SSID,
	QTN_TOK_CHANNEL,
	QTN_TOK_MODE,
	QTN_TOK_WME,
	QTN_TOK_WMMPS,
	QTN_TOK_RTS,
	QTN_TOK_FRGMNT,
	QTN_TOK_PWRSAVE,
	QTN_TOK_BCNINT,
	QTN_TOK_RADIO,
	QTN_TOK_40_INTOLERANT,
	QTN_TOK_ADDBA_REJECT,
	QTN_TOK_AMPDU,
	QTN_TOK_AMPDU_EXP,
	QTN_TOK_AMSDU,
	QTN_TOK_GREENFIELD,
	QTN_TOK_OFFSET,
	QTN_TOK_MCS_32,
	QTN_TOK_MCS_FIXEDRATE,
	QTN_TOK_SPATIAL_RX_STREAM,
	QTN_TOK_SPATIAL_TX_STREAM,
	QTN_TOK_MPDU_MIN_START_SPACING,
	QTN_TOK_RIFS_TEST,
	QTN_TOK_SGI20,
	QTN_TOK_STBC_TX,
	QTN_TOK_WIDTH,
	QTN_TOK_WIDTH_SCAN,
	QTN_TOK_CWMIN_VO,
	QTN_TOK_CWMIN_VI,
	QTN_TOK_CWMIN_BE,
	QTN_TOK_CWMIN_BK,
	QTN_TOK_CWMAX_VO,
	QTN_TOK_CWMAX_VI,
	QTN_TOK_CWMAX_BE,
	QTN_TOK_CWMAX_BK,
	QTN_TOK_AIFS_VO,
	QTN_TOK_AIFS_VI,
	QTN_TOK_AIFS_BE,
	QTN_TOK_AIFS_BK,
	QTN_TOK_TxOP_VO,
	QTN_TOK_TxOP_VI,
	QTN_TOK_TxOP_BE,
	QTN_TOK_TxOP_BK,
	QTN_TOK_ACM_VO,
	QTN_TOK_ACM_VI,
	QTN_TOK_ACM_BE,
	QTN_TOK_ACM_BK,
	QTN_TOK_STA_MAC_ADDRESS,
	QTN_TOK_MINORCODE,
	QTN_TOK_REGULATORY_MODE,
	QTN_TOK_COUNTRY_CODE,
	QTN_TOK_DFS_MODE,
	QTN_TOK_DFS_CHAN,
	QTN_TOK_NSS_MCS_OPT,
	QTN_TOK_OPT_MD_NOTIF_IE,
	QTN_TOK_CHNUM_BAND,
	QTN_TOK_TID,
	QTN_TOK_DEST_MAC,
	QTN_TOK_SUPPLICANT,
	QTN_TOK_PREAMBLE,
	QTN_TOK_POWERSAVE,
	QTN_TOK_NOACK,
	QTN_TOK_IGNORECHSWITCHPROHIBIT,
	QTN_TOK_TDLS,
	QTN_TOK_TDLSMODE,
	QTN_TOK_WFDDEVTYPE,
	QTN_TOK_UIBC_GEN,
	QTN_TOK_UIBC_HID,
	QTN_TOK_UI_INPUT,
	QTN_TOK_UIBC_PREPARE,
	QTN_TOK_HDCP,
	QTN_TOK_FRAMESKIP,
	QTN_TOK_AVCHANGE,
	QTN_TOK_STANDBY,
	QTN_TOK_INPUTCONTENT,
	QTN_TOK_VIDEOFORMAT,
	QTN_TOK_AUDIOFORMAT,
	QTN_TOK_I2C,
	QTN_TOK_VIDEORECOVERY,
	QTN_TOK_PREFDISPLAY,
	QTN_TOK_SERVICEDISCOVERY,
	QTN_TOK_3DVIDEO,
	QTN_TOK_MULTITXSTREAM,
	QTN_TOK_TIMESYNC,
	QTN_TOK_EDID,
	QTN_TOK_COUPLEDCAP,
	QTN_TOK_OPTIONALFEATURE,
	QTN_TOK_SESSIONAVAILABILITY,
	QTN_TOK_DEVICEDISCOVERABILITY,
	QTN_TOK_WMM,
	QTN_TOK_STBC_RX,
	QTN_TOK_MCS32,
	QTN_TOK_SMPS,
	QTN_TOK_TXSP_STREAM,
	QTN_TOK_RXSP_STREAM,
	QTN_TOK_BAND,
	QTN_TOK_DYN_BW_SGNL,
	QTN_TOK_SGI80,
	QTN_TOK_TXBF,
	QTN_TOK_LDPC,
	QTN_TOK_NSS_MCS_CAP,
	QTN_TOK_TX_LGI_RATE,
	QTN_TOK_ZERO_CRC,
	QTN_TOK_VHT_TKIP,
	QTN_TOK_VHT_WEP,
	QTN_TOK_BW_SGNL,
	QTN_TOK_PASSPHRASE,
	QTN_TOK_KEYMGMTTYPE,
	QTN_TOK_ENCPTYPE,
	QTN_TOK_PMF,
	QTN_TOK_MICALG,
	QTN_TOK_PREFER,
	QTN_TOK_FRAMENAME,
	QTN_TOK_CHANNEL_WIDTH,
	QTN_TOK_NSS,
	QTN_TOK_BSSID,
	QTN_TOK_MONTH,
	QTN_TOK_DATE,
	QTN_TOK_YEAR,
	QTN_TOK_HOURS,
	QTN_TOK_MINUTES,
	QTN_TOK_SECONDS,
	QTN_TOK_MAC,
	QTN_TOK_MAXSPLENGTH,
	QTN_TOK_ACBE,
	QTN_TOK_ACBK,
	QTN_TOK_ACVI,
	QTN_TOK_ACVO,
	QTN_TOK_MU_TXBF,
	QTN_TOK_RTS_BWS,
	QTN_TOK_ARP,
};

struct qtn_token_desc {
	const enum qtn_token tok_id;
	const char *tok_text;
};

struct qtn_cmd_param {
	enum qtn_token key_tok;
	int val_pos;
	int val_len;
};

#define QTN_CMD_MAX_PARAM_COUNT		32

struct qtn_cmd_request {
	struct qtn_cmd_param param_tab[QTN_CMD_MAX_PARAM_COUNT];
	int param_count;
	const char *req_ptr;
	int req_len;
};

int qtn_parse_params_encode_request(const char *params, char *buf_ptr, int buf_size);
int qtn_init_cmd_request(struct qtn_cmd_request *cmd_req, int cmd_tag,
		const unsigned char *req_ptr, int req_len);
int qtn_get_value_text(const struct qtn_cmd_request *cmd_req, enum qtn_token tok,
		char *buf_ptr, int buf_size);
int qtn_get_value_int(const struct qtn_cmd_request *cmd_req, enum qtn_token tok, int *value);
int qtn_get_value_enable(const struct qtn_cmd_request *cmd_req, enum qtn_token tok, int *enable,
		int *conv_error);

int qtn_validate_response_get_length(const char *buf_ptr, int buf_len);

#endif				/* QTN_CMD_PARSER_H_ */
